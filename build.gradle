plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.4-M2'
}
repositories {
    mavenLocal()
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlin-js-wrappers" }
    maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    mavenCentral()
}
def kotlin_version = '1.4-M2'
def ktor_version = "1.3.2-$kotlin_version"
def logback_version = '1.2.3'
def react_version = "16.13.0"
def react_wrapper_version = "$react_version-pre.93-kotlin-$kotlin_version"
def react_router_dom_version = "5.1.2-pre.105-kotlin-$kotlin_version-eap-83"
def artifactName = rootProject.name

kotlin {
    jvm()
    js {
        browser {
            binaries.executable()
        }
        compilations.all {
            kotlinOptions {
                sourceMap = true
                moduleKind = 'commonjs'
                metaInfo = true
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.3.0-M2"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "io.ktor:ktor-server-netty:$ktor_version"
                implementation "io.ktor:ktor-html-builder:$ktor_version"
                implementation "ch.qos.logback:logback-classic:$logback_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.3.0-M2"
                implementation "org.jetbrains:kotlin-react-dom:$react_wrapper_version"
                implementation npm("react", react_version) // used by kotlin-react-dom
                implementation npm("react-dom", react_version) // used by kotlin-react-dom
                implementation npm("react-is", react_version) // used by kotlin-react-dom
                implementation "org.jetbrains:kotlin-styled:1.0.0-pre.107-kotlin-$kotlin_version"
                implementation npm("styled-components","5.0.0")
                implementation npm("inline-style-prefixer","5.1.0")
                implementation npm("core-js", "3.1.4") // used by kotlin-react-dom
                implementation npm("text-encoding", "0.7.0") // used by ktor-client-js
                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-js:$ktor_version"
                implementation npm("react-bootstrap", "1.0.0-beta.16")
                implementation npm("bootstrap-css-only", "4.3.1")
                implementation npm("pickadate", "3.6.4")
                implementation npm("firebase", "7.6.1")
                implementation npm("numeral", "2.0.6")
                implementation "org.jetbrains:kotlin-react-router-dom:$react_router_dom_version"
                implementation npm("react-router-dom", "5.1.2")
                implementation npm("abort-controller", "3.0.0")
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.3.0-M2"
            }
        }
    }
}

jvmJar {
//     dependsOn(jsBrowserWebpack)
//     from(new File(jsBrowserWebpack.entry.name, jsBrowserWebpack.outputPath))
}

task run(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "sample.SampleJvmKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
    args = []
}

task copyDependenciesToPublic(type: Copy) {
    dependsOn(jsBrowserWebpack)
    def regex = ~/(?:src|href)=\"..\/..\/(build\/js\/node_modules)\/([^\"]+)\"/
    file("src/jsMain/resources/index.html").readLines().each { String line ->
        def matcher = regex.matcher(line)
        if (matcher.find()) {
            from(matcher.group(1))
            include(matcher.group(2))
            doLast {
                assert(file("build/public/lib/${matcher.group(2)}").exists())
            }
        }
    }
    from("build/distributions")
    include("${artifactName}.js")
    include("${artifactName}-${version}.js")
    rename { it.replace("${artifactName}-${version}.js", "${artifactName}.js") }
    into("build/public/lib")
    doLast {
        assert(file("build/public/lib/${artifactName}.js").exists())
    }
}

task copyWebToPublicExceptHtml(type: Copy) {
    from('src/jsMain/resources')
    include("**/*")
    exclude("index.html")
    into("build/public")
}

task copyHtmlToPublic(type: Copy) {
    from("src/jsMain/resources")
    include("index.html")
    into("build/public")
    outputs.upToDateWhen { false }
    filter {
        it.replace("../../build/js/node_modules/", "lib/")
                .replace("distributions/${artifactName}-${version}.js", "distributions/${artifactName}.js")
                .replace("../../build/distributions/${artifactName}.js", "lib/${artifactName}.js?" + Math.random())
    }
    doLast {
        file("build/public/index.html").readLines().each { String line ->
            assert(!line.contains("../"))
        }
    }
}

task copyToPublic {
    dependsOn(copyHtmlToPublic, copyWebToPublicExceptHtml, copyDependenciesToPublic)
    doLast {
        assert(file("build/public/css/index.css").exists())
        assert(file("build/public/index.html").exists())
    }
}

assemble.dependsOn(copyToPublic)
